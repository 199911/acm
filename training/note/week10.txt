CUHK ACM 2012 Summer Training
Week 10

Topic : String Manipulation
Speaker : GG & David
Scribe : David


Outline:
1. Longest Prefix-suffix Problem
2. Single Pattern Matching ( KMP Algorithm )
3. Single Pattern Matching ( String Hashing )
4. Multiple Pattern Matching ( Aho-Corasick Algorithm )
5. Suffix Array and its Application



1. Longest Prefix-Suffix Problem
	Given a string S[0...n-1] of length n, a string T is a prefix of S if T is an empty string or T = S[0...k] for some k < n - 1. Similarly, T is a suffix of S if T is either an empty string or T = S[k...n-1] for some k > 0.

	The Longest Prefix-Suffix Problem ( don't google it, I invented this name :o) ) ask you to find the longest string T that is both a prefix and a suffix of a given string S. We can visualize the setting as follows: 

		S: |___________________________________________|
		T: |_______________________|  
		                       |_______________________|  


	For small n, we can solve the problem in a brute force manner in O(n^2). But actually, the problem is solvable in linear time, based on the following properties of longest prefix-suffix

		Property 1.
			Suppose f(S) is the longest prefix-suffix of the string S. Then the 2-nd longest prefix suffix is f(f(S)), and the k-th longest prefix suffix is the string is f^k(S).
		Proof Idea:
			Let S_1, S_2 be the longest and 2_nd longest Prefix-Suffix. Then we have the following 

			S:		|____________________________________________________________|                a
			S_1:  |______________________________________|                                      b
																	|______________________________________|                c
			S_2:  |_______________|																															d 
																   |_______________|																			e
																	|_______________|																				f
																												 |_______________|								g
			which we can see from line a, d, g, that S_2 is also a Prefix-Suffix of S, and thus we can argue by contradiction ( says replacement method ) that S_2 is the longest prefix-suffix of S_1. Then the first part of the claim 
		follows by induction on k.

	The property 1 gives us a way to enumerate all the prefix-suffix of a given string if we know the longest prefix-suffix of all its prefixes. To compute f() efficienty, we still need another property.

		Property 2:
			Consider S[0...k-1] and S[1...k], suppose T[0...l] is the longest prefix-suffix of S[0...k], then T[0...l-1] is a prefix suffix of S[0...k-1].

		Proof Idea:
			Visualize as follows:
				S[0...k]:		|______________________________________________________________|		a
				S[0...k-1]:	|____________________________________________________________|*|		b
				T[0...l]:		|____________________________|																			c
																											|____________________________|		d
				T[0...l-1]: |__________________________|*|																			e
																											|__________________________|*|		f

			Then the claim is justified from line b, e, f.


		Then we compute f() inductively for all the prefixes of S[0...n-1].
			Base Case:
				f( empty string ) = empty string
				f( S[0...0] ) = empty string

			Inductive step:
				Suppose we have computed all the prefix-suffixes of every prefixes of S[0...k-1], we want to compute the longest prefix-suffix of S[0...k]. By properties 2, we can iterate through all the prefix-suffixes of S[0...k-1], says S[0...l-1], and for the first one that satisfies S[k] == S[l], we claim the longest prefix-suffix of S[0...k] is S[0...l].

		Implementation: 
		-------------------------------------------------------
				pi[0]=0;
				for(int i=1,j=0; s[i]; i++){
						while(j>0&&s[i]!=s[j]) j=pi[j-1];
						if(s[i]==s[j]) j++;
						pi[i]=j;
				}
		------------------------------------------------------

		Running Time:
			Notice that j increases by 1 at most n times. So the overall iteration count in the while loop is also at most n, which proves the linear running time. 


2. Single Pattern Matching : KMP Algorithm
	
	The Single Pattern Matching Problem ask you to find (or count) the occurence of a pattern string, says T, in a given string S. By KMP Algorithm, we can solve the problem in O(|S| + |T|) time.

	Observation:

		Traditionally, if we are trying to match S[i...i+k-1] to T[0...k-1] and fail at S[i + j], T[j], we start over from S[i+1] and T[0], this causes backing the pointer on S and lead to inefficiency. Notice we actually know what's in S[i...i + j - 1]. This make us ask if we can avoid backing the pointer at S.

		The idea is use the problem above. Suppose we have successfully match
		
		S: |___________________|x----------------|
		T:      |______________|x--------|

		where x denote the position of first failure. 

		Consider the longest prefix suffix of the matched part of T.

		S: |___________________|x----------------|
		T:      |______________|x--------|
						|________|?|     
						      |________|x|

		Since we have successful matched everything before 'x', we have also successful match everything before '?'. Then we can just compare 'x' with '?', which only backs the pointer to T.

	KMP Algorithm:
		(1) Compute the function f for all prefixes of T. 
		(2) Initialize pointer i and j at start of S and T. 
		(3) while i is not at tail of S. do
			(3.1) if S[i] == T[j]: j++;
						else if j > 0: j = f(j), repeat (3.1)
			(3.2) if j is at the tail of T, report YES
			(3.3) i++
		(4) report no.

	Implementation
	------------------------------------------------------
		int kmp( char s[], char t[] ) {
			pi[0] = 0;
			for ( int i = 1; j = 0; t[i]; i++ ) {
				while ( j > 0 && s[i] != s[j] ) j = pi[j - 1];
				if ( s[i] == s[j] ) j++;
				pi[i] = l;
			}

			int cnt = 0;
			for( int i = 0, j = 0; s[i]; i++ ) {
				while ( j > 0 && s[i] != t[j] ) j = pi[j - 1];
				if ( s[i] == t[j] ) j++;
				if ( j == n ) cnt++;
			}

			return cnt;
		}
	------------------------------------------------------

	The Running time Analysis is similar.


3. Multiple Pattern Matching. 
		Suppose we are not given a single pattern, but multiple patterns, how to we solve the problem?

		In order to solve the multiple pattern matching problem, we need to solve a simpler problem first. In this problem, we are given multiple patterns, and we are to determine whether a string is one of these patterns or not. The solution is to introduce a data structure called TRIE, or prefixed-tree


