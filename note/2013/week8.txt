CUHK ACM SUMMER TRAINING 2013

Week 13: Mathematics 2
Speaker: HDW

Outline:
1. More Number Theoretical Algorithms
  * System of Simultaneous Congruence
  * Stuffs about a^x mod m: Euler's Theorem, Primitive Roots, Discrete Log
  * Farey Sequence: dealing with rationals

2. Programming Tricks
  * Partial Sum
  * Differencing
  * Induction: factorize n!

3. Josephus Problems
  * O(n) solution: n small
  * O( k log n ) solution: n large

4. Enumerative Combinatorics
  * Catalan Number
  * Burnside Lemma, Polya Theorem

5. Discrete Fourier Transform
  * Idea and Application


Content:

1. More on Number Theoretic Algorithms
  (1) Solving System of Linear Congruence:
    * Solving Linear Congruence means:
    -------------------------------------
        maps 
          ax = b (m)
        to 
          x = c (n)
    -------------------------------------
    use pair<long long, long long> to represent an element in solution space
    we're looking for a c++ function:
      bool solve( int a, int b, int m, pair<int,int> &answer );
    -------------------------------------
      #define NOR(a,n) (((a)%(n)+(n))%(n))
      #define PLL pair<LL,LL>

      LL egcd( LL a, LL b, LL &s, LL &t ) {
        if ( b == 0 ) { 
          s = 1; t = 0; 
          return a;
        } 
        LL r = egcd(b, a % b, t, s );
        t -= ( a / b ) * s;
        return r;
      }

      LL inv( LL a, LL n ) {
        LL s, t, r;
        r = egcd( a, n, s, t );
        if ( r != 1 ) return -1;
        return NOR(s,n);
      }

      bool solve( LL a, LL b, LL m, PLL &ans ) {
        LL r = gcd( a, m );
        if ( b % r ) return false;
        a /= r; b /= r; m /= r;
        LL ia = inv( a, m ), c = NOR( ia * b, m );
        ans = PLL( c, m );
        return true;
      }
    -------------------------------------
    
    * Solving system of linear congruences:
      Discussion:
        solving: (1)
          | a[1] x = b[1] (m[1])
          | a[2] x = b[2] (m[2])
          | ......
          | a[k] x = b[k] (m[k])
        can be reduced to: (2) (why?)
          | x = c[1] (m[1])
          | x = c[2] (m[2])
          | ...
          | x = c[k] (m[k])
        moreover, if we know how to solve a system of 2 congruence, we can solve a system of k congruence by induction:
          | x = c[1] (m[1])
          | x = c[2] (m[2])
          =>
          | x = c' (m')
        Chinese Remainder Theorem:
          For system above, there's at most 1 solution mod lcm(m[1], m[2])
        Proof:
          Assume there's solution
          Idea:
            No more than 1 solution: 
              if 2 solutions, x[1], x[2] mod l = lcm(m[1], m[2]) then
                l | ( x[1] - x[2] )
            Construct a solution:
              assume m[1], m[2] coprime, then we're looking for a[1], a[2] such that the solution is
                a[1] c[1] + a[2] c[2] mod ( lcm(m[1], m[2]) )
              solve for a[1], a[2].
              What about m[1], m[2] not coprime?
      ------------------------------------  
      Thus we're looking for a c++ function
        bool merge( pair<int,int> a, pair<int,int> b, pair<int,int> &ans );
      ------------------------------------
      + Method of Successive Substitution
        Solving 
          | x = a (m)
          | x = b (n)
        =>
          x = ym + a for some y
        =>
          | ym + a = b (n)
        => 
          m y = b - a (n)
          we can solve that :)
        =>
          y = c (k)
        => 
          x = a + cm (km)
        =>
          done!
      -------------------------------------
        bool merge( PLL a, PLL b, PLL &ans ) {
           PLL tmp; 
           if ( solve( a.second, b.first - a.first, b.second, tmp ) ) {
              LL m = tmp.second * a.second, c = NOR(a.first + a.second * tmp.first, m);
              ans = PLL( c, m );
              return true;
           }
           return false;
        }
      -------------------------------------

  (2) Stuffs about a^x = b (m)
    Now that we can deal with everything linear (ax=b(m)), we can look for exponentiation: a^x = b(m)

    Q1: Given a, m, how many distinct b exists such that a^x = b(m) for some x:
    A1: Let's see, for example, m = 7
        x 0 1 2 3 4 5 6 ...
      a
      1   1 1 ...
      2   1 2 4 1 ....
      3   1 3 2 6 4 5 1 
      4   1 4 2 1 ....
      5   1 5 4 6 2 3 1 ...
      6   1 6 1 ...

        another example m = 6
        
        x 0 1 2 3 4 5 
      a 
      1   1 1 ...
      2   1 2 4 2 ....
      3   1 3 3 ...
      4   1 4 4 ...
      5   1 5 1 ...

    So they're periodic! There might be some elements before the first period.

    Theorem ( Euler Theorem )
      Given a, m, and gcd(a, m) = 1, 
        a^(phi(m)) = 1 (m)
    Rmk: 
      (a) every period length can devide phi(m)
      (b) this is the generalization of Fermat Little Theorem
    Proof
      consider the set of every element coprime to m (reduced residue group mod m), { x1, x2, x3, ... xk }
      and the set { ax1, ax2, ..., axk }. 
      (a) show they're the same mod m
      (b) conclude the theorem holds

    Q2: is phi(m) it a shortest period of some a? 
    A2: 
      Definition of order:
        if gcd( a, m ) = 1, the order of a mod m, ord(a, m) is the minimum nonnegative k such that a^k = 1 (m)
      
      + Thus Q2 become: do m have some element of order phi(m)?
      + These elements are called primitive root mod m.
      + Why primitive root?
          If m have a primitive root g, then every element a coprime to m can be represented as a = g^k for some k. 
        This k is called the index of a mod m. 
          Then we can solve:
            a^x = b mod m 
          if a, b are both coprime to m.
            a^x = b mod m 
          <=>
            g^idx[a] x = g^idx[b] (m)
          <=>
            idx[a] x = idx[b] (phi(m))
      + Answer of A2:
        Not every element have a primitive root. m have a primitive root if m is in form of 
          2, 4, 8, p^k, 2p^k where p is a odd prime and k is a positive integer
     
    Q3: How to find a primitive root:
    A3: There's no general formula in finding primitive root. So you can only trial and error.
      
    Q4: How to test whether a is a primitive root m
    A4: a is a primitive root mod m iffs a^phi(m) = 1 and a^k != 1 for all k | m.
        Complexity O(sqrt(phi(m)))

    * Problem: Discrete Log
      Given a, b, m. Find x such that a^x = b mod m.
