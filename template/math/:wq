#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cctype>
#include <algorithm>
#include <utility>
#include <numeric>
#include <functional>
#include <complex>
#include <utility>
#include <list>
#include <set>
#include <queue>
#include <stack>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <string>
using namespace std;

#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FOE(i,a,b) for (int i = (a); i <= (b); i++)
#define FR(i,e) for(__typeof(e.begin()) i = e.begin(); x != e.end(); i++)
#define SQR(x) ((x)*(x))
#define REP(i,n) FOR(i,0,n)
#define CLR(a,b) memset(a, b, sizeof(a))
#define INF (1<<29)
#define LL long long
#define PII pair<int,int>
#define PDI pair<double,int>
#define ISS istringstream
#define OSS ostringstream
#define gmin(a,b) { if ( b < a ) a = b; }
#define gmax(a,b) { if ( b > a ) a = b; }

typedef complex<double> CPX;

const double PI = atan( 1.0 ) * 4;

void fft( CPX *x, int n, CPX *y, int bInv ) {
  if ( n == 1 ) { 
    y[0] = x[0];
  } else {
    CPX * xeven = new CPX[n / 2], * xodd = new CPX[n / 2], w( 1, 0 );
    CPX * yeven = new CPX[n / 2], * yodd = new CPX[n / 2], wn;

    if ( bInv ) wn = CPX( cos( - 2 * PI / n ), sin( - 2 * PI / n ) );
    else wn = CPX( cos( 2 * PI / n ), sin( 2 * PI / n ) );

    for( int i = 0; i < n / 2; i++ ) {
      xeven[i] = x[i * 2];
      xodd[i] = x[i * 2 + 1];
    }

    fft( xeven, n / 2, yeven, bInv );
    fft( xodd, n / 2, yodd, bInv );

    for( int i = 0; i < n / 2; i++ ) {
      y[i] = yeven[i] + w * yodd[i];
      y[i + n / 2] = yeven[i] - w * yodd[i];
      w *= wn;
    }

    delete xeven; delete xodd; delete yeven; delete xodd;
  }
}

void PolyMult( double a[], int na, double b[], int nb, double c[], int &nc ) {
  int n = 1; 
  while( n <= na || n <= nb ) n <<= 1;
  CPX *x = new CPX[n], *ya = new CPX[n], *yb = new CPX[n], *yc = new CPX[n];

  for( int i = 0; i < n; i++ ) x[i] = i < na ? a[i] : 0;
  fft( x, n, ya, 0 );
  for( int i = 0; i < n; i++ ) x[i] = i < nb ? b[i] : 0;
  fft( x, n, yb, 0 );

  for( int i = 0; i <n; i++ ) yc[i] = ya[i] * yb[i];
  fft( yc, n, x, 1 );

  for( int i = 0; i < n; i++ ) 
    c[i] = x[i].real() / n;

  for( nc = n; nc > 0 && fabs( c[nc - 1] ) < 1e-9; nc-- );

  delete x; delete ya; delete yb; delete yc;
}

int main() {
  double A[111], B[111], C[111];
  int na, nb, nc;
  scanf( "%d", &na );
  for( int i = 0; i < na; i++ )
    scanf( "%lf", &A[i] );
  scanf( "%d", &nb );
  for( int i = 0; i < nb; i++ ) 
    scanf( "%lf", &B[i] );

  PolyMult( A, na, B, nb, C, nc );

  for( int i = 0; i < nc; i++ ) 
    printf( "%f ", C[i] );
  puts( "" );

  return 0;
}
